(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[65],{

/***/ "./examples/docs/zh-CN/tree.md":
/*!*************************************!*\
  !*** ./examples/docs/zh-CN/tree.md ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=ac3a4584 */ \"./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\");\n/* harmony import */ var _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tree.md?vue&type=script&lang=js */ \"./examples/docs/zh-CN/tree.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"ac3a4584\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('ac3a4584', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('ac3a4584', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./tree.md?vue&type=template&id=ac3a4584 */ \"./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=ac3a4584 */ \"./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\");\n(() => {\n    api.rerender('ac3a4584', _tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/zh-CN/tree.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL3poLUNOL3RyZWUubWQ/Y2NhMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBZ0U7QUFDVjtBQUNMO0FBQ2pELHdFQUFNLFVBQVUsNkVBQU07QUFDdEI7QUFDQSxJQUFJLElBQVU7QUFDZCxFQUFFLHdFQUFNO0FBQ1I7QUFDQTtBQUNBLG9DQUFvQyx3RUFBTTtBQUMxQywyQkFBMkIsd0VBQU07QUFDakM7O0FBRUEsb0JBQW9CLDRHQUF5QyxFQUFFO0FBQUE7QUFDL0QsNkJBQTZCLDZFQUFNO0FBQ25DLEdBQUc7O0FBRUg7O0FBRUEsd0VBQU07O0FBRVMsdUkiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL3poLUNOL3RyZWUubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFjM2E0NTg0XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHNjcmlwdC5fX2htcklkID0gXCJhYzNhNDU4NFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2FjM2E0NTg0Jywgc2NyaXB0KSkge1xuICAgIGFwaS5yZWxvYWQoJ2FjM2E0NTg0Jywgc2NyaXB0KVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hYzNhNDU4NFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdhYzNhNDU4NCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL3poLUNOL3RyZWUubWRcIlxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/zh-CN/tree.md\n");

/***/ }),

/***/ "./examples/docs/zh-CN/tree.md?vue&type=script&lang=js":
/*!*************************************************************!*\
  !*** ./examples/docs/zh-CN/tree.md?vue&type=script&lang=js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL3poLUNOL3RyZWUubWQ/OWNiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUF5TSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvemgtQ04vdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RyZWUubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/zh-CN/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584":
/*!*******************************************************************!*\
  !*** ./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584 ***!
  \*******************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=template&id=ac3a4584 */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_ac3a4584__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL3poLUNOL3RyZWUubWQ/OTUyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvemgtQ04vdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hYzNhNDU4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFjM2E0NTg0XCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/zh-CN/tree.md?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          defaultNodeKey: _ctx.defaultNodeKey,\n          onNodeClick: _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"defaultNodeKey\", \"onNodeClick\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: '一级 1',\n              children: [{\n                label: '二级 1-1',\n                children: [{\n                  label: '三级 1-1-1'\n                }]\n              }]\n            }, {\n              label: '一级 2',\n              children: [{\n                label: '二级 2-1',\n                children: [{\n                  label: '三级 2-1-1'\n                }]\n              }, {\n                label: '二级 2-2',\n                children: [{\n                  label: '三级 2-2-1'\n                }]\n              }]\n            }, {\n              label: '一级 3',\n              children: [{\n                label: '二级 3-1',\n                children: [{\n                  label: '三级 3-1-1'\n                }]\n              }, {\n                label: '二级 3-2',\n                children: [{\n                  label: '三级 3-2-1'\n                }]\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(node) {\n            console.log(node);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          defaultNodeKey: _ctx.defaultNodeKey,\n          \"async-load-fn\": _ctx.loadNode,\n          async: \"\",\n          \"show-checkbox\": \"\",\n          onCheckChange: _ctx.handleCheckChange\n        }, null, 8\n        /* PROPS */\n        , [\"defaultNodeKey\", \"async-load-fn\", \"onCheckChange\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            defaultNodeKey: {\n              label: 'name',\n              childNodes: 'zones'\n            },\n            count: 1\n          };\n        },\n\n        methods: {\n          handleCheckChange(node, e) {\n            console.log(node, e);\n          },\n\n          handleNodeClick(node) {\n            console.log(node);\n          },\n\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'region1'\n              }, {\n                name: 'region2'\n              }]);\n            }\n\n            if (node.level > 3) return resolve([]);\n            var hasChild;\n\n            if (node.data.raw.name === 'region1') {\n              hasChild = true;\n            } else if (node.data.raw.name === 'region2') {\n              hasChild = false;\n            } else {\n              hasChild = Math.random() > 0.5;\n            }\n\n            setTimeout(() => {\n              var data;\n\n              if (hasChild) {\n                data = [{\n                  name: 'zone' + this.count++\n                }, {\n                  name: 'zone' + this.count++\n                }];\n              } else {\n                data = [];\n              }\n\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          defaultNodeKey: _ctx.defaultNodeKey,\n          \"async-load-fn\": _ctx.loadNode,\n          async: \"\",\n          \"show-checkbox\": \"\"\n        }, null, 8\n        /* PROPS */\n        , [\"defaultNodeKey\", \"async-load-fn\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            defaultNodeKey: {\n              label: 'name',\n              childNodes: 'zones',\n              isLeaf: 'leaf'\n            }\n          };\n        },\n\n        methods: {\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'region'\n              }]);\n            }\n\n            if (node.level > 1) return resolve([]);\n            setTimeout(() => {\n              const data = [{\n                name: 'leaf',\n                leaf: true\n              }, {\n                name: 'zone'\n              }];\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          expanded: _ctx.expandedList,\n          \"onUpdate:expanded\": $event => _ctx.expandedList = $event,\n          checked: _ctx.checkedList,\n          \"onUpdate:checked\": $event => _ctx.checkedList = $event,\n          defaultNodeKey: _ctx.defaultNodeKey\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"expanded\", \"onUpdate:expanded\", \"checked\", \"onUpdate:checked\", \"defaultNodeKey\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            expandedList: [4, 5],\n            checkedList: [5],\n            data: [{\n              id: 1,\n              label: '一级 1',\n              children: [{\n                id: 4,\n                label: '二级 1-1',\n                children: [{\n                  id: 9,\n                  label: '三级 1-1-1'\n                }, {\n                  id: 10,\n                  label: '三级 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: '一级 2',\n              children: [{\n                id: 5,\n                label: '二级 2-1'\n              }, {\n                id: 6,\n                label: '二级 2-2'\n              }]\n            }, {\n              id: 3,\n              label: '一级 3',\n              children: [{\n                id: 7,\n                label: '二级 3-1'\n              }, {\n                id: 8,\n                label: '二级 3-2'\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          expanded: _ctx.expandedList,\n          \"onUpdate:expanded\": $event => _ctx.expandedList = $event,\n          checked: _ctx.checkedList,\n          \"onUpdate:checked\": $event => _ctx.checkedList = $event,\n          defaultNodeKey: _ctx.defaultNodeKey\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"expanded\", \"onUpdate:expanded\", \"checked\", \"onUpdate:checked\", \"defaultNodeKey\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            expandedList: [4, 5],\n            checkedList: [5],\n            data: [{\n              id: 1,\n              label: '一级 1',\n              children: [{\n                id: 4,\n                label: '二级 1-1',\n                children: [{\n                  id: 9,\n                  label: '三级 1-1-1',\n                  disabled: true\n                }, {\n                  id: 10,\n                  label: '三级 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: '一级 2',\n              children: [{\n                id: 5,\n                label: '二级 2-1'\n              }, {\n                id: 6,\n                label: '二级 2-2'\n              }]\n            }, {\n              id: 3,\n              label: '一级 3',\n              disabled: true,\n              children: [{\n                id: 7,\n                label: '二级 3-1'\n              }, {\n                id: 8,\n                label: '二级 3-2'\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              isDisabled: 'disabled',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"default-expand-all\": \"\",\n          ref: \"tree\",\n          \"highlight-current\": \"\",\n          defaultNodeKey: _ctx.defaultNodeKey\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"defaultNodeKey\"]), _createVNode(\"div\", {\n          class: \"buttons\"\n        }, [_createVNode(_component_el_button, {\n          onClick: _ctx.findNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"查找所有选中的元素（结果看控制台）\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.findNode\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"通过ID获取ID为10的节点\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.setCheckedNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"设置并展开ID为10的节点\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        methods: {\n          findNodes() {\n            console.log(this.$refs.tree.findMany(node => node.isChecked));\n          },\n\n          findNode() {\n            console.log(this.$refs.tree.findOne(10));\n          },\n\n          setCheckedNodes() {\n            this.$refs.tree.findOne(10).setChecked(true);\n            this.$refs.tree.findOne(10).expand(true);\n          }\n\n        },\n\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: '一级 1',\n              children: [{\n                id: 4,\n                label: '二级 1-1',\n                children: [{\n                  id: 9,\n                  label: '三级 1-1-1'\n                }, {\n                  id: 10,\n                  label: '三级 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: '一级 2',\n              children: [{\n                id: 5,\n                label: '二级 2-1'\n              }, {\n                id: 6,\n                label: '二级 2-2'\n              }]\n            }, {\n              id: 3,\n              label: '一级 3',\n              children: [{\n                id: 7,\n                label: '二级 3-1'\n              }, {\n                id: 8,\n                label: '二级 3-2'\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        toDisplayString: _toDisplayString,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(\"div\", {\n          class: \"custom-tree-container\"\n        }, [_createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"使用 render-content\"), _createVNode(_component_el_tree, {\n          data: _ctx.data1,\n          \"show-checkbox\": \"\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false,\n          \"render-content\": _ctx.renderContent\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"render-content\"])]), _createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"使用 scoped slot\"), _createVNode(_component_el_tree, {\n          data: _ctx.data2,\n          \"show-checkbox\": \"\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false\n        }, {\n          default: _withCtx(({\n            node,\n            data\n          }) => [_createVNode(\"span\", {\n            class: \"custom-tree-node\"\n          }, [_createVNode(\"span\", null, _toDisplayString(data.label), 1\n          /* TEXT */\n          ), _createVNode(\"span\", null, [_createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: $event => _ctx.append(node, data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Append \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"]), _createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: $event => _ctx.remove(node, data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Delete \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"])])])]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"])])]);\n      }\n\n      let id = 1000;\n      const democomponentExport = {\n        data() {\n          const data = [{\n            id: 1,\n            label: '一级 1',\n            childNodes: [{\n              id: 4,\n              label: '二级 1-1',\n              childNodes: [{\n                id: 9,\n                label: '三级 1-1-1'\n              }, {\n                id: 10,\n                label: '三级 1-1-2'\n              }]\n            }]\n          }, {\n            id: 2,\n            label: '一级 2',\n            childNodes: [{\n              id: 5,\n              label: '二级 2-1'\n            }, {\n              id: 6,\n              label: '二级 2-2'\n            }]\n          }, {\n            id: 3,\n            label: '一级 3',\n            childNodes: [{\n              id: 7,\n              label: '二级 3-1'\n            }, {\n              id: 8,\n              label: '二级 3-2'\n            }]\n          }];\n          return {\n            data1: JSON.parse(JSON.stringify(data)),\n            data2: JSON.parse(JSON.stringify(data))\n          };\n        },\n\n        methods: {\n          append(node, data) {\n            const newChild = {\n              id: id++,\n              label: 'testtest',\n              childNodes: []\n            };\n            node.append(newChild);\n          },\n\n          remove(node, data) {\n            node.remove();\n          },\n\n          renderContent({\n            node,\n            data\n          }) {\n            return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", {\n              \"class\": \"custom-tree-node\"\n            }, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [data.label]), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"onClick\": () => this.append(node, data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Append\")]\n            }), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"onClick\": () => this.remove(node, data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Delete\")]\n            })])]);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_input, {\n          placeholder: \"输入关键字进行过滤\",\n          modelValue: _ctx.filterText,\n          \"onUpdate:modelValue\": $event => _ctx.filterText = $event\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_tree, {\n          class: \"filter-tree\",\n          data: _ctx.data,\n          defaultNodeKey: _ctx.defaultNodeKey,\n          \"default-expand-all\": \"\",\n          ref: \"tree\"\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"defaultNodeKey\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        watch: {\n          filterText(val) {\n            this.$refs.tree.filter(node => {\n              return this.filterNode(val, node);\n            });\n          }\n\n        },\n        methods: {\n          filterNode(value, data) {\n            if (!value) return true;\n            return data.label.indexOf(value) !== -1;\n          }\n\n        },\n\n        data() {\n          return {\n            filterText: '',\n            data: [{\n              id: 1,\n              label: '一级 1',\n              children: [{\n                id: 4,\n                label: '二级 1-1',\n                children: [{\n                  id: 9,\n                  label: '三级 1-1-1'\n                }, {\n                  id: 10,\n                  label: '三级 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: '一级 2',\n              children: [{\n                id: 5,\n                label: '二级 2-1'\n              }, {\n                id: 6,\n                label: '二级 2-2'\n              }]\n            }, {\n              id: 3,\n              label: '一级 3',\n              children: [{\n                id: 7,\n                label: '二级 3-1'\n              }, {\n                id: 8,\n                label: '二级 3-2'\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          defaultNodeKey: _ctx.defaultNodeKey,\n          accordion: \"\",\n          onNodeClick: _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"defaultNodeKey\", \"onNodeClick\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: '一级 1',\n              children: [{\n                label: '二级 1-1',\n                children: [{\n                  label: '三级 1-1-1'\n                }]\n              }]\n            }, {\n              label: '一级 2',\n              children: [{\n                label: '二级 2-1',\n                children: [{\n                  label: '三级 2-1-1'\n                }]\n              }, {\n                label: '二级 2-2',\n                children: [{\n                  label: '三级 2-2-1'\n                }]\n              }]\n            }, {\n              label: '一级 3',\n              children: [{\n                label: '二级 3-1',\n                children: [{\n                  label: '三级 3-1-1'\n                }]\n              }, {\n                label: '二级 3-2',\n                children: [{\n                  label: '三级 3-2-1'\n                }]\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(node, data) {\n            console.log(node, data);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          defaultNodeKey: _ctx.defaultNodeKey,\n          \"default-expand-all\": \"\",\n          onNodeDragStart: _ctx.handleDragStart,\n          onNodeDragEnter: _ctx.handleDragEnter,\n          onNodeDragLeave: _ctx.handleDragLeave,\n          onNodeDragOver: _ctx.handleDragOver,\n          onNodeDragEnd: _ctx.handleDragEnd,\n          onNodeDrop: _ctx.handleDrop,\n          draggable: \"\",\n          \"allow-drop\": _ctx.allowDrop,\n          \"allow-drag\": _ctx.allowDrag\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"defaultNodeKey\", \"onNodeDragStart\", \"onNodeDragEnter\", \"onNodeDragLeave\", \"onNodeDragOver\", \"onNodeDragEnd\", \"onNodeDrop\", \"allow-drop\", \"allow-drag\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: '一级 1',\n              children: [{\n                id: 4,\n                label: '二级 1-1',\n                children: [{\n                  id: 9,\n                  label: '三级 1-1-1'\n                }, {\n                  id: 10,\n                  label: '三级 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: '一级 2',\n              children: [{\n                id: 5,\n                label: '二级 2-1'\n              }, {\n                id: 6,\n                label: '二级 2-2'\n              }]\n            }, {\n              id: 3,\n              label: '一级 3',\n              children: [{\n                id: 7,\n                label: '二级 3-1'\n              }, {\n                id: 8,\n                label: '二级 3-2',\n                children: [{\n                  id: 11,\n                  label: '三级 3-2-1'\n                }, {\n                  id: 12,\n                  label: '三级 3-2-2'\n                }, {\n                  id: 13,\n                  label: '三级 3-2-3'\n                }]\n              }]\n            }],\n            defaultNodeKey: {\n              childNodes: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleDragStart(node, ev) {\n            console.log('drag start', node);\n          },\n\n          handleDragEnter(draggingNode, dropNode, ev) {\n            console.log('tree drag enter: ', dropNode);\n          },\n\n          handleDragLeave(draggingNode, dropNode, ev) {\n            console.log('tree drag leave: ', dropNode);\n          },\n\n          handleDragOver(draggingNode, dropNode, ev) {\n            console.log('tree drag over: ', dropNode);\n          },\n\n          handleDragEnd(draggingNode, dropNode, ev) {\n            console.log('tree drag end: ', dropNode);\n          },\n\n          handleDrop(draggingNode, dropNode, dropType, ev) {\n            console.log('tree drop: ', dropNode, dropType);\n          },\n\n          allowDrop(draggingNode, dropNode, type) {\n            if (dropNode.data.raw.label === '二级 3-1') {\n              return type !== 'inner';\n            } else {\n              return true;\n            }\n          },\n\n          allowDrag(draggingNode) {\n            return draggingNode.data.raw.label.indexOf('三级 3-2-2') === -1;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584 ***!
  \***************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", null, \"Tree 树形控件\", -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"用清晰的层级结构展示信息，可展开或折叠。\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", { class: \"warning\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"添加节点、删除节点等操作必须使用 ElTree 提供的方法进行。\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"基础用法\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"基础的树形结构展示。\", -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  @node-click=\\\"handleNodeClick\\\"\\n></el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [\\n          {\\n            label: '一级 1',\\n            children: [\\n              {\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    label: '三级 1-1-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            label: '一级 2',\\n            children: [\\n              {\\n                label: '二级 2-1',\\n                children: [\\n                  {\\n                    label: '三级 2-1-1'\\n                  }\\n                ]\\n              },\\n              {\\n                label: '二级 2-2',\\n                children: [\\n                  {\\n                    label: '三级 2-2-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            label: '一级 3',\\n            children: [\\n              {\\n                label: '二级 3-1',\\n                children: [\\n                  {\\n                    label: '三级 3-1-1'\\n                  }\\n                ]\\n              },\\n              {\\n                label: '二级 3-2',\\n                children: [\\n                  {\\n                    label: '三级 3-2-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    },\\n    methods: {\\n      handleNodeClick(node) {\\n        console.log(node)\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"可选择\", -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"适用于需要选择层级时使用。\", -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"本例还展示了动态加载节点数据的方法。\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  :async-load-fn=\\\"loadNode\\\"\\n  async\\n  show-checkbox\\n  @check-change=\\\"handleCheckChange\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        defaultNodeKey: {\\n          label: 'name',\\n          childNodes: 'zones'\\n        },\\n        count: 1\\n      }\\n    },\\n    methods: {\\n      handleCheckChange(node, e) {\\n        console.log(node, e)\\n      },\\n      handleNodeClick(node) {\\n        console.log(node)\\n      },\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'region1' }, { name: 'region2' }])\\n        }\\n        if (node.level > 3) return resolve([])\\n\\n        var hasChild\\n        if (node.data.raw.name === 'region1') {\\n          hasChild = true\\n        } else if (node.data.raw.name === 'region2') {\\n          hasChild = false\\n        } else {\\n          hasChild = Math.random() > 0.5\\n        }\\n\\n        setTimeout(() => {\\n          var data\\n          if (hasChild) {\\n            data = [\\n              {\\n                name: 'zone' + this.count++\\n              },\\n              {\\n                name: 'zone' + this.count++\\n              }\\n            ]\\n          } else {\\n            data = []\\n          }\\n\\n          resolve(data)\\n        }, 500)\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"懒加载自定义叶子节点\", -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree 某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  :async-load-fn=\\\"loadNode\\\"\\n  async\\n  show-checkbox\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        defaultNodeKey: {\\n          label: 'name',\\n          childNodes: 'zones',\\n          isLeaf: 'leaf'\\n        }\\n      }\\n    },\\n    methods: {\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'region' }])\\n        }\\n        if (node.level > 1) return resolve([])\\n\\n        setTimeout(() => {\\n          const data = [\\n            {\\n              name: 'leaf',\\n              leaf: true\\n            },\\n            {\\n              name: 'zone'\\n            }\\n          ]\\n\\n          resolve(data)\\n        }, 500)\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"默认展开和默认选中\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"可将 Tree 的某些节点设置为默认展开或默认选中\", -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"分别通过\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"expanded\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"和\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"checked\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"设置默认展开和默认选中的节点, 并且可以使用 vMdel 来同步当前树的展开节点状态和选中节点状态。需要注意的是，此时必须设置\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"defaultNodeKey.id\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  v-model:expanded=\\\"expandedList\\\"\\n  v-model:checked=\\\"checkedList\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        expandedList: [4, 5],\\n        checkedList: [5],\\n        data: [\\n          {\\n            id: 1,\\n            label: '一级 1',\\n            children: [\\n              {\\n                id: 4,\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    id: 9,\\n                    label: '三级 1-1-1'\\n                  },\\n                  {\\n                    id: 10,\\n                    label: '三级 1-1-2'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            id: 2,\\n            label: '一级 2',\\n            children: [\\n              {\\n                id: 5,\\n                label: '二级 2-1'\\n              },\\n              {\\n                id: 6,\\n                label: '二级 2-2'\\n              }\\n            ]\\n          },\\n          {\\n            id: 3,\\n            label: '一级 3',\\n            children: [\\n              {\\n                id: 7,\\n                label: '二级 3-1'\\n              },\\n              {\\n                id: 8,\\n                label: '二级 3-2'\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"禁用状态\", -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"可将 Tree 的某些节点设置为禁用状态\", -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"通过\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"设置禁用状态。\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  v-model:expanded=\\\"expandedList\\\"\\n  v-model:checked=\\\"checkedList\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        expandedList: [4, 5],\\n        checkedList: [5],\\n        data: [\\n          {\\n            id: 1,\\n            label: '一级 1',\\n            children: [\\n              {\\n                id: 4,\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    id: 9,\\n                    label: '三级 1-1-1',\\n                    disabled: true\\n                  },\\n                  {\\n                    id: 10,\\n                    label: '三级 1-1-2'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            id: 2,\\n            label: '一级 2',\\n            children: [\\n              {\\n                id: 5,\\n                label: '二级 2-1'\\n              },\\n              {\\n                id: 6,\\n                label: '二级 2-2'\\n              }\\n            ]\\n          },\\n          {\\n            id: 3,\\n            label: '一级 3',\\n            disabled: true,\\n            children: [\\n              {\\n                id: 7,\\n                label: '二级 3-1'\\n              },\\n              {\\n                id: 8,\\n                label: '二级 3-2'\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          isDisabled: 'disabled',\\n          label: 'label'\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"树节点的选择\", -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"。\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  default-expand-all\\n  ref=\\\"tree\\\"\\n  highlight-current\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n>\\n</el-tree>\\n<div class=\\\"buttons\\\">\\n  <el-button @click=\\\"findNodes\\\">查找所有选中的元素（结果看控制台）</el-button>\\n  <el-button @click=\\\"findNode\\\">通过ID获取ID为10的节点</el-button>\\n  <el-button @click=\\\"setCheckedNodes\\\">设置并展开ID为10的节点</el-button>\\n</div>\\n\\n<script>\\n  export default {\\n    methods: {\\n      findNodes() {\\n        console.log(this.$refs.tree.findMany((node) => node.isChecked))\\n      },\\n      findNode() {\\n        console.log(this.$refs.tree.findOne(10))\\n      },\\n      setCheckedNodes() {\\n        this.$refs.tree.findOne(10).setChecked(true)\\n        this.$refs.tree.findOne(10).expand(true)\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        data: [\\n          {\\n            id: 1,\\n            label: '一级 1',\\n            children: [\\n              {\\n                id: 4,\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    id: 9,\\n                    label: '三级 1-1-1'\\n                  },\\n                  {\\n                    id: 10,\\n                    label: '三级 1-1-2'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            id: 2,\\n            label: '一级 2',\\n            children: [\\n              {\\n                id: 5,\\n                label: '二级 2-1'\\n              },\\n              {\\n                id: 6,\\n                label: '二级 2-2'\\n              }\\n            ]\\n          },\\n          {\\n            id: 3,\\n            label: '一级 3',\\n            children: [\\n              {\\n                id: 7,\\n                label: '二级 3-1'\\n              },\\n              {\\n                id: 8,\\n                label: '二级 3-2'\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"自定义节点内容\", -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"节点的内容支持自定义，可以在节点区添加按钮或图标等内容\", -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"可以通过两种方法进行树节点内容的自定义：\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"和 scoped slot。使用\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。使用 scoped slot 会传入两个参数\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"和\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"data\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"，分别表示当前节点的 Node 对象和当前节点的数据。注意：由于 jsfiddle 不支持 JSX 语法，所以\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"示例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<div class=\\\"custom-tree-container\\\">\\n  <div class=\\\"block\\\">\\n    <p>使用 render-content</p>\\n    <el-tree\\n      :data=\\\"data1\\\"\\n      show-checkbox\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\"\\n      :render-content=\\\"renderContent\\\"\\n    >\\n    </el-tree>\\n  </div>\\n  <div class=\\\"block\\\">\\n    <p>使用 scoped slot</p>\\n    <el-tree\\n      :data=\\\"data2\\\"\\n      show-checkbox\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\"\\n    >\\n      <template v-slot=\\\"{ node, data }\\\">\\n        <span class=\\\"custom-tree-node\\\">\\n          <span>{{ data.label }}</span>\\n          <span>\\n            <el-button type=\\\"text\\\" size=\\\"mini\\\" @click=\\\"append(node, data)\\\">\\n              Append\\n            </el-button>\\n            <el-button type=\\\"text\\\" size=\\\"mini\\\" @click=\\\"remove(node, data)\\\">\\n              Delete\\n            </el-button>\\n          </span>\\n        </span>\\n      </template>\\n    </el-tree>\\n  </div>\\n</div>\\n\\n<script>\\n  let id = 1000\\n\\n  export default {\\n    data() {\\n      const data = [\\n        {\\n          id: 1,\\n          label: '一级 1',\\n          childNodes: [\\n            {\\n              id: 4,\\n              label: '二级 1-1',\\n              childNodes: [\\n                {\\n                  id: 9,\\n                  label: '三级 1-1-1'\\n                },\\n                {\\n                  id: 10,\\n                  label: '三级 1-1-2'\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          id: 2,\\n          label: '一级 2',\\n          childNodes: [\\n            {\\n              id: 5,\\n              label: '二级 2-1'\\n            },\\n            {\\n              id: 6,\\n              label: '二级 2-2'\\n            }\\n          ]\\n        },\\n        {\\n          id: 3,\\n          label: '一级 3',\\n          childNodes: [\\n            {\\n              id: 7,\\n              label: '二级 3-1'\\n            },\\n            {\\n              id: 8,\\n              label: '二级 3-2'\\n            }\\n          ]\\n        }\\n      ]\\n      return {\\n        data1: JSON.parse(JSON.stringify(data)),\\n        data2: JSON.parse(JSON.stringify(data))\\n      }\\n    },\\n\\n    methods: {\\n      append(node, data) {\\n        const newChild = { id: id++, label: 'testtest', childNodes: [] }\\n        node.append(newChild)\\n      },\\n\\n      remove(node, data) {\\n        node.remove()\\n      },\\n\\n      renderContent({ node, data }) {\\n        return (\\n          <span class=\\\"custom-tree-node\\\">\\n            <span>{data.label}</span>\\n            <span>\\n              <el-button\\n                size=\\\"mini\\\"\\n                type=\\\"text\\\"\\n                onClick={() => this.append(node, data)}\\n              >\\n                Append\\n              </el-button>\\n              <el-button\\n                size=\\\"mini\\\"\\n                type=\\\"text\\\"\\n                onClick={() => this.remove(node, data)}\\n              >\\n                Delete\\n              </el-button>\\n            </span>\\n          </span>\\n        )\\n      }\\n    }\\n  }\\n</script>\\n\\n<style>\\n  .custom-tree-node {\\n    flex: 1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    font-size: 14px;\\n    padding-right: 8px;\\n  }\\n</style>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"节点过滤\", -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"通过关键字过滤树节点\", -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"在需要对节点进行过滤时，调用 Tree 实例的\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"方法，参数为关键字。需要注意的是，此时需要设置\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-node-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"，值为过滤函数。\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-input placeholder=\\\"输入关键字进行过滤\\\" v-model=\\\"filterText\\\"> </el-input>\\n\\n<el-tree\\n  class=\\\"filter-tree\\\"\\n  :data=\\\"data\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  default-expand-all\\n  ref=\\\"tree\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    watch: {\\n      filterText(val) {\\n        this.$refs.tree.filter((node) => {\\n          return this.filterNode(val, node)\\n        })\\n      }\\n    },\\n\\n    methods: {\\n      filterNode(value, data) {\\n        if (!value) return true\\n        return data.label.indexOf(value) !== -1\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        filterText: '',\\n        data: [\\n          {\\n            id: 1,\\n            label: '一级 1',\\n            children: [\\n              {\\n                id: 4,\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    id: 9,\\n                    label: '三级 1-1-1'\\n                  },\\n                  {\\n                    id: 10,\\n                    label: '三级 1-1-2'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            id: 2,\\n            label: '一级 2',\\n            children: [\\n              {\\n                id: 5,\\n                label: '二级 2-1'\\n              },\\n              {\\n                id: 6,\\n                label: '二级 2-2'\\n              }\\n            ]\\n          },\\n          {\\n            id: 3,\\n            label: '一级 3',\\n            children: [\\n              {\\n                id: 7,\\n                label: '二级 3-1'\\n              },\\n              {\\n                id: 8,\\n                label: '二级 3-2'\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"手风琴模式\", -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"对于同一级的节点，每次只能展开一个\", -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  accordion\\n  @node-click=\\\"handleNodeClick\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [\\n          {\\n            label: '一级 1',\\n            children: [\\n              {\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    label: '三级 1-1-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            label: '一级 2',\\n            children: [\\n              {\\n                label: '二级 2-1',\\n                children: [\\n                  {\\n                    label: '三级 2-1-1'\\n                  }\\n                ]\\n              },\\n              {\\n                label: '二级 2-2',\\n                children: [\\n                  {\\n                    label: '三级 2-2-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            label: '一级 3',\\n            children: [\\n              {\\n                label: '二级 3-1',\\n                children: [\\n                  {\\n                    label: '三级 3-1-1'\\n                  }\\n                ]\\n              },\\n              {\\n                label: '二级 3-2',\\n                children: [\\n                  {\\n                    label: '三级 3-2-1'\\n                  }\\n                ]\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    },\\n    methods: {\\n      handleNodeClick(node, data) {\\n        console.log(node, data)\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", null, \"可拖拽节点\", -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"通过 draggable 属性可让节点变为可拖拽。\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :defaultNodeKey=\\\"defaultNodeKey\\\"\\n  default-expand-all\\n  @node-drag-start=\\\"handleDragStart\\\"\\n  @node-drag-enter=\\\"handleDragEnter\\\"\\n  @node-drag-leave=\\\"handleDragLeave\\\"\\n  @node-drag-over=\\\"handleDragOver\\\"\\n  @node-drag-end=\\\"handleDragEnd\\\"\\n  @node-drop=\\\"handleDrop\\\"\\n  draggable\\n  :allow-drop=\\\"allowDrop\\\"\\n  :allow-drag=\\\"allowDrag\\\"\\n>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [\\n          {\\n            id: 1,\\n            label: '一级 1',\\n            children: [\\n              {\\n                id: 4,\\n                label: '二级 1-1',\\n                children: [\\n                  {\\n                    id: 9,\\n                    label: '三级 1-1-1'\\n                  },\\n                  {\\n                    id: 10,\\n                    label: '三级 1-1-2'\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            id: 2,\\n            label: '一级 2',\\n            children: [\\n              {\\n                id: 5,\\n                label: '二级 2-1'\\n              },\\n              {\\n                id: 6,\\n                label: '二级 2-2'\\n              }\\n            ]\\n          },\\n          {\\n            id: 3,\\n            label: '一级 3',\\n            children: [\\n              {\\n                id: 7,\\n                label: '二级 3-1'\\n              },\\n              {\\n                id: 8,\\n                label: '二级 3-2',\\n                children: [\\n                  {\\n                    id: 11,\\n                    label: '三级 3-2-1'\\n                  },\\n                  {\\n                    id: 12,\\n                    label: '三级 3-2-2'\\n                  },\\n                  {\\n                    id: 13,\\n                    label: '三级 3-2-3'\\n                  }\\n                ]\\n              }\\n            ]\\n          }\\n        ],\\n        defaultNodeKey: {\\n          childNodes: 'children',\\n          label: 'label'\\n        }\\n      }\\n    },\\n    methods: {\\n      handleDragStart(node, ev) {\\n        console.log('drag start', node)\\n      },\\n      handleDragEnter(draggingNode, dropNode, ev) {\\n        console.log('tree drag enter: ', dropNode)\\n      },\\n      handleDragLeave(draggingNode, dropNode, ev) {\\n        console.log('tree drag leave: ', dropNode)\\n      },\\n      handleDragOver(draggingNode, dropNode, ev) {\\n        console.log('tree drag over: ', dropNode)\\n      },\\n      handleDragEnd(draggingNode, dropNode, ev) {\\n        console.log('tree drag end: ', dropNode)\\n      },\\n      handleDrop(draggingNode, dropNode, dropType, ev) {\\n        console.log('tree drop: ', dropNode, dropType)\\n      },\\n      allowDrop(draggingNode, dropNode, type) {\\n        if (dropNode.data.raw.label === '二级 3-1') {\\n          return type !== 'inner'\\n        } else {\\n          return true\\n        }\\n      },\\n      allowDrag(draggingNode) {\\n        return draggingNode.data.raw.label.indexOf('三级 3-2-2') === -1\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_40 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3>Structure</h3><p>TreeNode 是整个 <code>ElTree</code> 组件内部的节点类，在调用 <code>ElTree</code> 提供的方法的时候优先为用户返回的是 TreeNode 节点。</p><pre><code class=\\\"hljs language-ts\\\"><span class=\\\"hljs-keyword\\\">interface</span> TreeNode {\\n  id: ID\\n\\n  label: <span class=\\\"hljs-built_in\\\">string</span>\\n\\n  parent: TreeNode\\n\\n  childNodes: TreeNode[]\\n\\n  isVisable: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isChecked: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isIndeterminate: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isExpanded: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isDisabled: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isDraggable: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isRendered: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  data: { raw: RawNode } <span class=\\\"hljs-comment\\\">// Additional data carried by the node</span>\\n\\n  isLeaf: <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  isAsync: <span class=\\\"hljs-built_in\\\">boolean</span> <span class=\\\"hljs-comment\\\">// Load child only at expand time</span>\\n\\n  asyncState: AsyncState <span class=\\\"hljs-comment\\\">// notload || loaded || loading</span>\\n\\n  asyncLoadFn: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">currentNode: TreeNode, resolveFn: ResolveFn</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span> <span class=\\\"hljs-comment\\\">// (currentNode, resolveFn) async load child node</span>\\n\\n  append: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">node: TreeNode | RawNode</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  remove: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  insert: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">index: <span class=\\\"hljs-built_in\\\">number</span>, node: TreeNode | RawNode</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  removeChild: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">index: <span class=\\\"hljs-built_in\\\">number</span></span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  setChecked: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">value?: <span class=\\\"hljs-built_in\\\">boolean</span>, strictly?: <span class=\\\"hljs-built_in\\\">boolean</span></span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  setChildChildren: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">value: <span class=\\\"hljs-built_in\\\">boolean</span></span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  upwardEach: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">callback: <span class=\\\"hljs-built_in\\\">Function</span>, opt: { isSkipSelf: <span class=\\\"hljs-built_in\\\">boolean</span> }</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  depthEach: (\\n    upToDownCallBack: (\\n      node: TreeNode,\\n      parentNode: TreeNode,\\n      deep: <span class=\\\"hljs-built_in\\\">number</span>\\n    ) =&gt; <span class=\\\"hljs-built_in\\\">boolean</span>,\\n    downToUpCallBack?: (\\n      node: TreeNode,\\n      parentNode: TreeNode,\\n      deep: <span class=\\\"hljs-built_in\\\">number</span>\\n    ) =&gt; <span class=\\\"hljs-built_in\\\">boolean</span>\\n  ) =&gt; <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  findOne: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">target: TreeNode | ID</span>) =&gt;</span> TreeNode\\n\\n  findMany: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">label: <span class=\\\"hljs-built_in\\\">string</span></span>) =&gt;</span> TreeNode\\n\\n  findChildIndex: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">target: TreeNode</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">number</span>\\n\\n  expand: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">value: <span class=\\\"hljs-built_in\\\">boolean</span>, ...extraNodes: TreeNode[] | RawNode[]</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  setVsiable: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">value: <span class=\\\"hljs-built_in\\\">boolean</span></span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">void</span>\\n\\n  move: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">target: TreeNode, relative: Relative</span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">boolean</span>\\n\\n  filter: (\\n    callback: <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">node: TreeNode, parentNode: TreeNode, deep: <span class=\\\"hljs-built_in\\\">number</span></span>) =&gt;</span> <span class=\\\"hljs-built_in\\\">boolean</span>\\n  ) =&gt; <span class=\\\"hljs-built_in\\\">boolean</span>\\n}\\n</code></pre><div class=\\\"warning\\\"><p>注意：TreeNode 是内部节点类，RawNode 是用户的节点类, 有些方法可以传 TreeNode 也可以传 RawNode, 他内部会自动识别 RawNode，并且转换为 TreeNode.</p></div><h3>Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>展示数据</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>内容为空的时候展示的文本</td><td>String</td><td>—</td><td>—</td></tr><tr><td>default-node-key</td><td>配置选项，具体看下表</td><td>DefaultNodeKey</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>是否在第一次展开某个树节点后才渲染其子节点</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>async-load-fn</td><td>异步加载子树数据的方法，仅当 async 属性为 true 时生效</td><td>function(node:TreeNode, resolve:Function)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>树节点的内容区的渲染 Function</td><td>Function({ treeNode, rawNode })</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>是否高亮当前选中节点，默认值是 false。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>是否默认展开所有节点</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expanded(VModel)</td><td>展开的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>节点是否可被选择</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>checked(VModel)</td><td>勾选的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>当前选中的节点</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>是否每次只打开一个同级树节点展开</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>相邻级节点间的水平缩进，单位为像素</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>自定义树节点的图标</td><td>string</td><td>-</td><td>-</td></tr><tr><td>async</td><td>是否异步加载子节点，需与 asyncLoadFn 方法结合使用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>是否开启拖拽节点功能</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>判断节点能否被拖拽</td><td>Function(node, e)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>拖拽时判定目标节点能否被放置。<code>type</code> 参数有三种情况：&#39;top&#39;、&#39;inner&#39; 和 &#39;bottom&#39;，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</td><td>Function(draggingNode, dropNode, type)</td><td>—</td><td>—</td></tr></tbody></table><h3>DefaultNodeKey</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>每个节点用来作为唯一标识的属性，整棵树应该是唯一的</td><td>string</td><td>—</td><td>id</td></tr><tr><td>label</td><td>指定节点标签为节点对象的某个属性值</td><td>string</td><td>—</td><td>label</td></tr><tr><td>childNodes</td><td>指定子树为节点对象的某个属性值</td><td>string</td><td>—</td><td>children</td></tr><tr><td>isDisabled</td><td>指定节点选择框是否禁用为节点对象的某个属性值</td><td>string</td><td>—</td><td>isDisabled</td></tr><tr><td>isAsync</td><td>指定节点是否为异步节点</td><td>string</td><td>—</td><td>isAsync</td></tr><tr><td>isChecked</td><td>指定节点是否为选中状态</td><td>string</td><td>—</td><td>isChecked</td></tr><tr><td>isVisable</td><td>指定节点是否可显示</td><td>string</td><td>—</td><td>isVisable</td></tr><tr><td>isExpanded</td><td>指定节点是否为展开状态</td><td>string</td><td>—</td><td>isExpanded</td></tr></tbody></table><h3>Methods</h3><p><code>Tree</code> 内部使用了 <code>TreeNode</code> 类型的对象来包装用户传入（<code>RawNode</code>）的数据，用来保存目前节点的状态。</p><p>通过访问 ref 来获取 tree 对象，并且 Tree 组件暴露了<code>tree</code>变量与<code>root</code>变量</p><p>以下的方法都是直接从上面的两个对象导出，目的是为了调用方便</p><p><code>TreeNode</code>与<code>Tree</code> 方法：</p><table><thead><tr><th>方法名</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>append(node)</td><td>node:TreeNode|RawNode</td><td>为当前节点添加子节点</td></tr><tr><td>remove()</td><td>NULL</td><td>删除当前节点</td></tr><tr><td>insert(index, node)</td><td>index:Number, node:TreeNode|RawNode</td><td>为当前节点的插入一个子元素，到 index 位置</td></tr><tr><td>removeChild(index)</td><td>index:Number</td><td>移除 index 位置的子元素</td></tr><tr><td>setChecked(value, strictly)</td><td>value:Boolean = !value, stricly:Boolean = false</td><td>设置元素为选中状态，strictly 表示是否只选中当前节点</td></tr><tr><td>setChildChecked(value)</td><td>value:Boolean</td><td>设置子节点为 value</td></tr><tr><td>upwardEach(callback, opts)</td><td>callback(node:TreeNode)=&gt;Boolean, opts.isSkipSelf:Boolean = true</td><td>从当前节点向上遍历树，opts.isSkipSelf 是否跳过当前节点，回调函数的返回 true 的话会停止遍历</td></tr><tr><td>depthEach(upToDownCallBack, downToUpCallBack)</td><td>upToDownCallBack(node:TreeNode, parentNode:TreeNode, deep: number)=&gt;Boolean，downToUpCallBack(node:TreeNode, parentNode:TreeNode, deep: number)=&gt;Boolean</td><td>从 当前节点向下遍历，回调函数的返回 true 的话会停止遍历</td></tr><tr><td>findOne(target) =&gt; TreeNode</td><td>target:TreeNode|ID</td><td>查找当前当前子树的目标节点，可以通过 id 或者节点查询</td></tr><tr><td>findMany(label) =&gt; TreeNode[]</td><td>label:String</td><td>通过 label 查找节点</td></tr><tr><td>findChildIndex(target) =&gt; Number</td><td>target:TreeNode</td><td>只查找子节点</td></tr><tr><td>expand(value, ...extraNodes)</td><td>value:Boolean = !value, extraNodes: TreeNodo|RawNode = []</td><td>展开该节点，在展开的时候可以添加节点</td></tr><tr><td>setVsiable(value)</td><td>value:Boolean = !value</td><td>设置当前节点是否可见</td></tr><tr><td>move(target, relative)</td><td>target:TreeNode, relative:String</td><td>移动当前节点到目标节点的相对位置（上,内，下），relative <em>top, bottom, inner</em></td></tr><tr><td>filter(callback)</td><td>callback(node, parentNode, deep) =&gt; Boolean</td><td>筛选节点，callback 返回 true 表示显示，返回 false 表示隐藏</td></tr></tbody></table><p><code>Tree</code>方法：</p><table><thead><tr><th>方法名</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>initRoot()</td><td>NULL</td><td>重新构建树</td></tr><tr><td>getParentRawNode(rawNode) =&gt; RawNode</td><td>rawNode:RawNode</td><td>获取当前原始节点的父元素</td></tr><tr><td>showAll()</td><td>NULL</td><td>显示所有节点</td></tr><tr><td>checkedAll()</td><td>NULL</td><td>选中所有节点</td></tr><tr><td>expandAll()</td><td>NULL</td><td>展开所有节点</td></tr></tbody></table><h3>Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>node-click</td><td>节点被点击时的回调</td><td>共两个参数，依次为：点击的节点，event</td></tr><tr><td>node-contextmenu</td><td>当某一节点被鼠标右键点击时会触发该事件</td><td>共两个参数，依次为：当前节点，event。</td></tr><tr><td>check-change</td><td>节点选中状态发生变化时的回调</td><td>共两个参数，依次为：当前节点，event（选中状态）</td></tr><tr><td>check</td><td>当复选框被点击的时候触发</td><td>共三个参数，依次为 当前节点, 选中状态，event</td></tr><tr><td>current-change</td><td>当前选中节点变化时触发的事件</td><td>共两个参数，依次为：当前节点，event</td></tr><tr><td>node-expand</td><td>节点被展开时触发的事件</td><td>共两个参数，依次为：当前节点，event</td></tr><tr><td>node-collapse</td><td>节点被关闭时触发的事件</td><td>共两个参数，依次为：当前节点，event</td></tr><tr><td>node-drag-start</td><td>节点开始拖拽时触发的事件</td><td>共两个参数，依次为：被拖拽节点对应的 Node、event</td></tr><tr><td>node-drag-enter</td><td>拖拽进入其他节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event</td></tr><tr><td>node-drag-leave</td><td>拖拽离开某个节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event</td></tr><tr><td>node-drag-over</td><td>在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）</td><td>共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event</td></tr><tr><td>node-drag-end</td><td>拖拽结束时（可能未成功）触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、event</td></tr><tr><td>node-drop</td><td>拖拽成功完成时触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（top、bottom、inner）、event</td></tr></tbody></table><h3>Scoped Slot</h3><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>—</td><td>自定义树节点的内容，参数为 { treeNode, rawNode }</td></tr></tbody></table>\", 20)\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    _hoisted_5,\n    _hoisted_6,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_7\n      ]),\n      _: 1\n    }),\n    _hoisted_8,\n    _hoisted_9,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_11\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_10\n      ]),\n      _: 1\n    }),\n    _hoisted_12,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_14\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      _: 1\n    }),\n    _hoisted_15,\n    _hoisted_16,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_18\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      _: 1\n    }),\n    _hoisted_19,\n    _hoisted_20,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_22\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      _: 1\n    }),\n    _hoisted_23,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_25\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      _: 1\n    }),\n    _hoisted_26,\n    _hoisted_27,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_29\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      _: 1\n    }),\n    _hoisted_30,\n    _hoisted_31,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_33\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_32\n      ]),\n      _: 1\n    }),\n    _hoisted_34,\n    _hoisted_35,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_36\n      ]),\n      _: 1\n    }),\n    _hoisted_37,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_39\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_38\n      ]),\n      _: 1\n    }),\n    _hoisted_40\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/zh-CN/tree.md?vue&type=template&id=ac3a4584\n");

/***/ })

}]);